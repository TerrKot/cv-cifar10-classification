#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö CIFAR-10
"""

import torch
import torchvision
import torchvision.transforms as transforms
import os
import sys
import platform
import numpy as np
from torch.utils.data import DataLoader

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 50)
    
    # Python –≤–µ—Ä—Å–∏—è
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # PyTorch –≤–µ—Ä—Å–∏—è
    print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
    
    # CUDA –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    cuda_available = torch.cuda.is_available()
    print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {'‚úÖ –î–∞' if cuda_available else '‚ùå –ù–µ—Ç'}")
    
    if cuda_available:
        print(f"CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {torch.cuda.device_count()}")
        for i in range(torch.cuda.device_count()):
            print(f"  GPU {i}: {torch.cuda.get_device_name(i)}")
            print(f"    –ü–∞–º—è—Ç—å: {torch.cuda.get_device_properties(i).total_memory / 1024**3:.1f} GB")
    
    # –°–∏—Å—Ç–µ–º–∞
    print(f"–û–°: {platform.system()} {platform.release()}")
    print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
    
    # –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å
    try:
        import psutil
        memory = psutil.virtual_memory()
        print(f"RAM: {memory.total / 1024**3:.1f} GB (–¥–æ—Å—Ç—É–ø–Ω–æ: {memory.available / 1024**3:.1f} GB)")
    except ImportError:
        print("RAM: psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return cuda_available

def check_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö CIFAR-10"""
    
    print(f"\nüìä –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• CIFAR-10")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data_dir = './data'
    if not os.path.exists(data_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
        return False
    
    print(f"‚úÖ –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
    data_contents = os.listdir(data_dir)
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
    for item in data_contents:
        item_path = os.path.join(data_dir, item)
        if os.path.isdir(item_path):
            print(f"  üìÅ {item}/")
        else:
            size = os.path.getsize(item_path) / 1024**2  # MB
            print(f"  üìÑ {item} ({size:.1f} MB)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CIFAR-10
    cifar_dir = os.path.join(data_dir, 'cifar-10-batches-py')
    if not os.path.exists(cifar_dir):
        print(f"‚ùå CIFAR-10 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {cifar_dir}")
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º CIFAR-10...")
        return download_cifar10()
    
    print(f"‚úÖ CIFAR-10 –Ω–∞–π–¥–µ–Ω –≤ {cifar_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã CIFAR-10
    required_files = [
        'batches.meta',
        'data_batch_1',
        'data_batch_2', 
        'data_batch_3',
        'data_batch_4',
        'data_batch_5',
        'test_batch'
    ]
    
    missing_files = []
    for file in required_files:
        file_path = os.path.join(cifar_dir, file)
        if not os.path.exists(file_path):
            missing_files.append(file)
        else:
            size = os.path.getsize(file_path) / 1024**2  # MB
            print(f"  ‚úÖ {file} ({size:.1f} MB)")
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    return True

def download_cifar10():
    """–ó–∞–≥—Ä—É–∑–∫–∞ CIFAR-10"""
    
    print("üì• –ó–ê–ì–†–£–ó–ö–ê CIFAR-10")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs('./data', exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º CIFAR-10
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º CIFAR-10...")
        train_dataset = torchvision.datasets.CIFAR10(
            root='./data', train=True, download=True
        )
        
        test_dataset = torchvision.datasets.CIFAR10(
            root='./data', train=False, download=True
        )
        
        print("‚úÖ CIFAR-10 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CIFAR-10: {e}")
        return False

def test_data_loading():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º DataLoader
        transform = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
        ])
        
        train_dataset = torchvision.datasets.CIFAR10(
            root='./data', train=True, download=False, transform=transform
        )
        
        test_dataset = torchvision.datasets.CIFAR10(
            root='./data', train=False, download=False, transform=transform
        )
        
        train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True, num_workers=2)
        test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False, num_workers=2)
        
        print(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {len(train_dataset):,}")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {len(test_dataset):,}")
        print(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –±–∞—Ç—á–µ–π: {len(train_loader)}")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã—Ö –±–∞—Ç—á–µ–π: {len(test_loader)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞—Ç—á–∞
        print("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞—Ç—á–∞...")
        data_iter = iter(train_loader)
        images, labels = next(data_iter)
        
        print(f"‚úÖ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {images.shape}")
        print(f"‚úÖ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {images.dtype}")
        print(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: [{images.min():.3f}, {images.max():.3f}]")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {len(torch.unique(labels))}")
        
        # –ö–ª–∞—Å—Å—ã CIFAR-10
        classes = ('airplane', 'automobile', 'bird', 'cat', 'deer', 
                  'dog', 'frog', 'horse', 'ship', 'truck')
        print(f"‚úÖ –ö–ª–∞—Å—Å—ã: {classes}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_performance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    print(f"\n‚ö° –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    try:
        import time
        
        # –¢–µ—Å—Ç CPU
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º CPU...")
        start_time = time.time()
        x = torch.randn(1000, 1000)
        y = torch.randn(1000, 1000)
        z = torch.mm(x, y)
        cpu_time = time.time() - start_time
        print(f"‚úÖ CPU: {cpu_time:.3f} —Å–µ–∫ (–º–∞—Ç—Ä–∏—Ü–∞ 1000x1000)")
        
        # –¢–µ—Å—Ç GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if torch.cuda.is_available():
            print("–¢–µ—Å—Ç–∏—Ä—É–µ–º GPU...")
            start_time = time.time()
            x_gpu = torch.randn(1000, 1000).cuda()
            y_gpu = torch.randn(1000, 1000).cuda()
            z_gpu = torch.mm(x_gpu, y_gpu)
            torch.cuda.synchronize()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è GPU –æ–ø–µ—Ä–∞—Ü–∏–π
            gpu_time = time.time() - start_time
            print(f"‚úÖ GPU: {gpu_time:.3f} —Å–µ–∫ (–º–∞—Ç—Ä–∏—Ü–∞ 1000x1000)")
            print(f"‚úÖ –£—Å–∫–æ—Ä–µ–Ω–∏–µ GPU: {cpu_time/gpu_time:.1f}x")
        else:
            print("‚ùå GPU –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –ò –î–ê–ù–ù–´–• CIFAR-10")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    cuda_available = check_environment()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data_ok = check_data()
    
    if not data_ok:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –î–ê–ù–ù–´–ú–ò")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    loading_ok = test_data_loading()
    
    if not loading_ok:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ó–ê–ì–†–£–ó–ö–û–ô –î–ê–ù–ù–´–•")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    perf_ok = check_performance()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    print(f"–û–∫—Ä—É–∂–µ–Ω–∏–µ: {'‚úÖ –ì–æ—Ç–æ–≤–æ' if cuda_available else '‚ö†Ô∏è  CPU —Ç–æ–ª—å–∫–æ'}")
    print(f"–î–∞–Ω–Ω—ã–µ: {'‚úÖ –ì–æ—Ç–æ–≤—ã' if data_ok else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}")
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if loading_ok else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}")
    print(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω' if perf_ok else '‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã'}")
    
    if cuda_available and data_ok and loading_ok:
        print(f"\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
