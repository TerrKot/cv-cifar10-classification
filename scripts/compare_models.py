#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ Baseline –∏ Improved CNN –Ω–∞ 5 —ç–ø–æ—Ö–∞—Ö
"""

import torch
import matplotlib.pyplot as plt
import numpy as np
import os
import sys

def load_results():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    
    results = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–æ–±—É—á–µ–Ω–Ω–æ–π Baseline –º–æ–¥–µ–ª–∏
    baseline_un trained_file = 'results/baseline_results.txt'
    if os.path.exists(baseline_un trained_file):
        with open(baseline_un trained_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            for line in lines:
                if '–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:' in line:
                    accuracy = float(line.split(':')[1].strip().replace('%', ''))
                    results['baseline_un trained'] = {
                        'name': 'Baseline CNN (–Ω–µ–æ–±—É—á–µ–Ω–Ω–∞—è)',
                        'accuracy': accuracy,
                        'color': 'lightblue'
                    }
                    break
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Baseline (5 —ç–ø–æ—Ö)
    baseline_file = 'results/baseline_5epochs_report.txt'
    if os.path.exists(baseline_file):
        with open(baseline_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            for line in lines:
                if '–§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:' in line:
                    accuracy = float(line.split(':')[1].strip().replace('%', ''))
                    results['baseline'] = {
                        'name': 'Baseline CNN (5 epochs)',
                        'accuracy': accuracy,
                        'color': 'blue'
                    }
                    break
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Improved
    improved_file = 'results/improved_5epochs_report.txt'
    if os.path.exists(improved_file):
        with open(improved_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            for line in lines:
                if '–§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:' in line:
                    accuracy = float(line.split(':')[1].strip().replace('%', ''))
                    results['improved'] = {
                        'name': 'Improved CNN (5 epochs)',
                        'accuracy': accuracy,
                        'color': 'red'
                    }
                    break
    
    return results

def create_comparison_plot(results):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    if len(results) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 6))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    models = list(results.keys())
    accuracies = [results[model]['accuracy'] for model in models]
    colors = [results[model]['color'] for model in models]
    names = [results[model]['name'] for model in models]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    sorted_data = sorted(zip(models, accuracies, colors, names), key=lambda x: x[1])
    models_sorted, accuracies_sorted, colors_sorted, names_sorted = zip(*sorted_data)
    
    bars = ax1.bar(range(len(models_sorted)), accuracies_sorted, color=colors_sorted, alpha=0.7)
    ax1.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)')
    ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π')
    ax1.set_ylim(0, 100)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, (bar, acc) in enumerate(zip(bars, accuracies_sorted)):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 1,
                f'{acc:.1f}%', ha='center', va='bottom', fontweight='bold')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π
    ax1.set_xticks(range(len(models_sorted)))
    ax1.set_xticklabels([name.replace(' CNN', '').replace(' (5 epochs)', '').replace(' (–Ω–µ–æ–±—É—á–µ–Ω–Ω–∞—è)', '') 
                        for name in names_sorted], rotation=45, ha='right')
    ax1.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    if 'baseline' in results and 'improved' in results:
        baseline_acc = results['baseline']['accuracy']
        improved_acc = results['improved']['accuracy']
        diff = improved_acc - baseline_acc
        colors_diff = ['green' if diff > 0 else 'red']
        
        ax2.bar(['Improved vs Baseline'], [diff], color=colors_diff, alpha=0.7)
        ax2.set_ylabel('–†–∞–∑–Ω–∏—Ü–∞ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ (%)')
        ax2.set_title(f'Improved vs Baseline\n({diff:+.1f}%)')
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        ax2.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü
        ax2.text(0, diff + (1 if diff > 0 else -1), f'{diff:+.1f}%', 
                 ha='center', va='bottom' if diff > 0 else 'top', fontweight='bold')
    else:
        ax2.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', 
                ha='center', va='center', transform=ax2.transAxes, fontsize=12)
        ax2.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π')
    
    plt.tight_layout()
    plt.savefig('results/comparison_all_models.png', dpi=150, bbox_inches='tight')
    plt.show()
    
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ results/comparison_all_models.png")

def create_comparison_report(results):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    if len(results) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    filename = 'results/comparison_all_models_report.txt'
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("–û–¢–ß–ï–¢ –°–†–ê–í–ù–ï–ù–ò–Ø –í–°–ï–• –ú–û–î–ï–õ–ï–ô CIFAR-10\n")
        f.write("=" * 50 + "\n\n")
        
        f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´:\n")
        f.write("-" * 30 + "\n")
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
        sorted_results = sorted(results.items(), key=lambda x: x[1]['accuracy'], reverse=True)
        for model_key, model_data in sorted_results:
            f.write(f"{model_data['name']}: {model_data['accuracy']:.2f}%\n")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if 'baseline' in results and 'improved' in results:
            baseline_acc = results['baseline']['accuracy']
            improved_acc = results['improved']['accuracy']
            diff = improved_acc - baseline_acc
            
            f.write(f"\n–°–†–ê–í–ù–ï–ù–ò–ï –û–ë–£–ß–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô:\n")
            f.write("-" * 30 + "\n")
            f.write(f"Baseline CNN (5 epochs): {baseline_acc:.2f}%\n")
            f.write(f"Improved CNN (5 epochs): {improved_acc:.2f}%\n")
            f.write(f"–†–∞–∑–Ω–∏—Ü–∞: {diff:+.2f}%\n")
            
            if diff > 0:
                f.write(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: Improved CNN (+{diff:.2f}%)\n")
            elif diff < 0:
                f.write(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: Baseline CNN ({abs(diff):.2f}% –ª—É—á—à–µ)\n")
            else:
                f.write(f"–ù–∏—á—å—è: –û–¥–∏–Ω–∞–∫–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å\n")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        if 'baseline_un trained' in results and 'baseline' in results:
            un trained_acc = results['baseline_un trained']['accuracy']
            trained_acc = results['baseline']['accuracy']
            improvement = trained_acc - un trained_acc
            
            f.write(f"\n–ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê –û–ë–£–ß–ï–ù–ò–Ø:\n")
            f.write("-" * 30 + "\n")
            f.write(f"Baseline CNN (–Ω–µ–æ–±—É—á–µ–Ω–Ω–∞—è): {un trained_acc:.2f}%\n")
            f.write(f"Baseline CNN (5 epochs): {trained_acc:.2f}%\n")
            f.write(f"–£–ª—É—á—à–µ–Ω–∏–µ: +{improvement:.2f}%\n")
            f.write(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è: {trained_acc/un trained_acc:.1f}x\n")
        
        f.write(f"\n–í–´–í–û–î:\n")
        f.write("-" * 30 + "\n")
        if 'baseline' in results and 'improved' in results:
            baseline_acc = results['baseline']['accuracy']
            improved_acc = results['improved']['accuracy']
            diff = improved_acc - baseline_acc
            
            if abs(diff) < 1:
                f.write("–û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n")
            elif diff > 0:
                f.write("Improved CNN –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–µ–¥–∏ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.\n")
            else:
                f.write("Baseline CNN –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–µ–¥–∏ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.\n")
        
        if 'baseline_un trained' in results and 'baseline' in results:
            f.write("–û–±—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏.\n")
    
    print(f"‚úÖ –û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –ú–û–î–ï–õ–ï–ô CIFAR-10")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('results', exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = load_results()
    
    if len(results) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("  python scripts/train_baseline_5_epochs.py")
        print("  python scripts/train_improved_5_epochs.py")
        return
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
    sorted_results = sorted(results.items(), key=lambda x: x[1]['accuracy'], reverse=True)
    for model_key, model_data in sorted_results:
        print(f"  {model_data['name']}: {model_data['accuracy']:.2f}%")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if 'baseline' in results and 'improved' in results:
        baseline_acc = results['baseline']['accuracy']
        improved_acc = results['improved']['accuracy']
        diff = improved_acc - baseline_acc
        
        print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –û–ë–£–ß–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô:")
        print(f"  Baseline CNN (5 epochs): {baseline_acc:.2f}%")
        print(f"  Improved CNN (5 epochs): {improved_acc:.2f}%")
        print(f"  –†–∞–∑–Ω–∏—Ü–∞: {diff:+.2f}%")
        
        if diff > 0:
            print(f"  –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: Improved CNN (+{diff:.2f}%)")
        elif diff < 0:
            print(f"  –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: Baseline CNN ({abs(diff):.2f}% –ª—É—á—à–µ)")
        else:
            print(f"  –ù–∏—á—å—è: –û–¥–∏–Ω–∞–∫–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
    if 'baseline_un trained' in results and 'baseline' in results:
        un trained_acc = results['baseline_un trained']['accuracy']
        trained_acc = results['baseline']['accuracy']
        improvement = trained_acc - un trained_acc
        
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"  –ù–µ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {un trained_acc:.2f}%")
        print(f"  –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å (5 epochs): {trained_acc:.2f}%")
        print(f"  –£–ª—É—á—à–µ–Ω–∏–µ: +{improvement:.2f}%")
        print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è: {trained_acc/un trained_acc:.1f}x")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç
    create_comparison_plot(results)
    create_comparison_report(results)
    
    print(f"\nüéâ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

if __name__ == "__main__":
    main()
