#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è CNN –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ CIFAR-10
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
import numpy as np

class SimpleCNN(nn.Module):
    """–ü—Ä–æ—Å—Ç–∞—è CNN –¥–ª—è CIFAR-10"""
    
    def __init__(self, num_classes=10):
        super(SimpleCNN, self).__init__()
        
        # –°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–ª–æ–∏
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        
        # Batch Normalization
        self.bn1 = nn.BatchNorm2d(32)
        self.bn2 = nn.BatchNorm2d(64)
        self.bn3 = nn.BatchNorm2d(128)
        
        # Pooling
        self.pool = nn.MaxPool2d(2, 2)
        
        # Dropout
        self.dropout = nn.Dropout(0.5)
        
        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏
        self.fc1 = nn.Linear(128 * 4 * 4, 512)
        self.fc2 = nn.Linear(512, num_classes)
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è
        self.relu = nn.ReLU()
        
    def forward(self, x):
        # –ü–µ—Ä–≤—ã–π –±–ª–æ–∫: Conv -> BN -> ReLU -> Pool
        x = self.pool(self.relu(self.bn1(self.conv1(x))))
        
        # –í—Ç–æ—Ä–æ–π –±–ª–æ–∫: Conv -> BN -> ReLU -> Pool
        x = self.pool(self.relu(self.bn2(self.conv2(x))))
        
        # –¢—Ä–µ—Ç–∏–π –±–ª–æ–∫: Conv -> BN -> ReLU -> Pool
        x = self.pool(self.relu(self.bn3(self.conv3(x))))
        
        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –≤–µ–∫—Ç–æ—Ä
        x = x.view(x.size(0), -1)
        
        # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏
        x = self.dropout(self.relu(self.fc1(x)))
        x = self.fc2(x)
        
        return x

def count_parameters(model):
    """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    return sum(p.numel() for p in model.parameters() if p.requires_grad)

def get_data_loaders(batch_size=64, shuffle=True):
    """–°–æ–∑–¥–∞–Ω–∏–µ DataLoader –¥–ª—è CIFAR-10"""
    
    # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    train_dataset = torchvision.datasets.CIFAR10(
        root='./data', train=True, download=True, transform=transform
    )
    
    test_dataset = torchvision.datasets.CIFAR10(
        root='./data', train=False, download=True, transform=transform
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataLoader
    train_loader = DataLoader(
        train_dataset, batch_size=batch_size, shuffle=shuffle, num_workers=2
    )
    
    test_loader = DataLoader(
        test_dataset, batch_size=batch_size, shuffle=False, num_workers=2
    )
    
    return train_loader, test_loader

def test_model_on_batch(model, data_loader, device):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ"""
    model.eval()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω –±–∞—Ç—á
    dataiter = iter(data_loader)
    images, labels = next(dataiter)
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    images = images.to(device)
    labels = labels.to(device)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    with torch.no_grad():
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
    
    return images, labels, outputs, predicted

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π CNN –¥–ª—è CIFAR-10")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = SimpleCNN(num_classes=10).to(device)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_params = count_parameters(model)
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")
    
    # –°–æ–∑–¥–∞–µ–º DataLoader
    print(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ DataLoader (batch_size=64, shuffle=True)...")
    train_loader, test_loader = get_data_loaders(batch_size=64, shuffle=True)
    
    print(f"–†–∞–∑–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞: {len(train_loader.dataset)}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º –Ω–∞–±–æ—Ä–µ: {len(train_loader)}")
    print(f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞: {len(test_loader.dataset)}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ: {len(test_loader)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ...")
    images, labels, outputs, predicted = test_model_on_batch(model, train_loader, device)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç—á–µ –∏ –≤—ã—Ö–æ–¥–µ
    print(f"Batch shape: {images.shape}")
    print(f"Output shape: {outputs.shape}")
    print(f"Labels shape: {labels.shape}")
    print(f"Predicted shape: {predicted.shape}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–æ–º –±–∞—Ç—á–µ
    correct = (predicted == labels).sum().item()
    total = labels.size(0)
    accuracy = 100 * correct / total
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ:")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {correct}/{total}")
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}%")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    classes = ('airplane', 'automobile', 'bird', 'cat', 'deer', 
               'dog', 'frog', 'horse', 'ship', 'truck')
    
    print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 5):")
    for i in range(min(5, len(predicted))):
        true_label = classes[labels[i]]
        pred_label = classes[predicted[i]]
        correct_symbol = "‚úÖ" if predicted[i] == labels[i] else "‚ùå"
        print(f"  {correct_symbol} –ò—Å—Ç–∏–Ω–Ω—ã–π: {true_label}, –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π: {pred_label}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—É—á–µ–Ω–∏—é –Ω–∞ {total_params:,} –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")

if __name__ == "__main__":
    main()
