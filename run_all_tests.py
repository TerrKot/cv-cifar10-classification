#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ CIFAR-10
"""

import subprocess
import sys
import os
import time

def run_test(script_name, description):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    
    start_time = time.time()
    
    try:
        result = subprocess.run([sys.executable, script_name], check=True)
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration/60:.1f} –º–∏–Ω—É—Ç")
        return True
        
    except subprocess.CalledProcessError as e:
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –∑–∞ {duration/60:.1f} –º–∏–Ω—É—Ç")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üéØ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í CIFAR-10")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('results', exist_ok=True)
    os.makedirs('models', exist_ok=True)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("scripts/check_env_and_data.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö"),
        ("scripts/baseline_results.py", "Baseline —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"),
        ("scripts/train_baseline_5_epochs.py", "–û–±—É—á–µ–Ω–∏–µ Baseline CNN (5 —ç–ø–æ—Ö)"),
        ("scripts/train_improved_5_epochs.py", "–û–±—É—á–µ–Ω–∏–µ Improved CNN (5 —ç–ø–æ—Ö)")
    ]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    for script, description in tests:
        success = run_test(script, description)
        results.append((description, success))
        
        if not success:
            print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç '{description}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏? (y/n): ")
            if response.lower() != 'y':
                break
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    passed = 0
    failed = 0
    
    for description, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} - {description}")
        
        if success:
            passed += 1
        else:
            failed += 1
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    
    if failed == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print(f"\n‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")

if __name__ == "__main__":
    main()
